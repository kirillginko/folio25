.container {
  /* position: relative;
  top: 20px;
  right: 20px; */
  z-index: 10;
}
.designContainer {
  position: relative;
  border-radius: 16px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  background: var(--background-color);
  border: 1px solid var(--border-color);
  padding: 0;
  touch-action: none;
  user-select: none;
  transition: width 0.15s ease, height 0.15s ease;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
  overflow: hidden;
  max-width: calc(100vw - 40px);
  max-height: calc(100vh - 40px);
}

.canvasWrapper {
  position: relative;
  width: 100%;
  height: calc(100% - 80px); /* Subtract controls height */
  overflow: hidden;
  background-color: white; /* Add explicit background color */
}

.canvasWrapper canvas {
  display: block;
  width: 100% !important;
  height: 100% !important;
  object-fit: contain;
  margin: 0;
  padding: 0;
  cursor: crosshair;
  background-color: white; /* Add explicit background color */
}

.minimizedContainer {
  width: 80px !important;
  height: 80px !important;
  border: 1px solid black;
  border-radius: 20% !important;
  background-color: #e6e6e6;
  padding: 0;
  overflow: hidden;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: width 0.15s ease, height 0.15s ease;
}

.minimizedContent {
  display: flex;
  align-items: center;
  justify-content: center;
}

.minimizedText {
  font-size: 44px;
  color: #000;
}

.controls {
  position: relative; /* Change from absolute to relative */
  width: 100%;
  display: flex;
  justify-content: space-between;
  padding: 20px;
  background-color: rgb(245, 245, 245);
  border-radius: 16px 16px 0 0;
  z-index: 2;
  min-height: 80px;
  align-items: center;
  border-bottom: 1px solid rgb(183, 183, 183);
}

.controls:active {
  cursor: grabbing;
}

.control {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.25rem;
  font-size: 0.8rem;
  color: #333;
  padding: 0 0.5rem;
  height: 100%;
  text-align: center;
}

.control input[type="range"] {
  -webkit-appearance: none;
  appearance: none;
  width: 80px;
  height: 16px;
  background: #e0e0e0;
  cursor: pointer;
  /* border: 1px solid #333; */
  border-radius: 8px;
  padding: 0 4px;
  transition: width 0.3s ease, height 0.3s ease, background-color 0.3s ease;
}

.control input[type="range"]:hover {
  background: #c0c0c0;
}

.control input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 12px;
  height: 12px;
  background: white;
  border: 1px solid #333;
  border-radius: 50%;
  cursor: pointer;
  margin-top: -1px;
}

.control input[type="range"]::-moz-range-thumb {
  width: 12px;
  height: 12px;
  background: white;
  border: 1px solid #333;
  border-radius: 50%;
  cursor: pointer;
}

.control input[type="range"]::-moz-range-track {
  height: 16px;
  background: #e0e0e0;
  border-radius: 8px;
  transition: width 0.3s ease, height 0.3s ease, background-color 0.3s ease;
}

.control input[type="range"]:hover::-moz-range-track {
  background: #c0c0c0;
}

/* Remove focus outline */
.control input[type="range"]:focus {
  outline: none;
}

.control input[type="color"] {
  width: 30px;
  height: 30px;
  padding: 0;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  background: none;
}

.control input[type="color"]::-webkit-color-swatch-wrapper {
  padding: 0;
}

.control input[type="color"]::-webkit-color-swatch {
  border: 2px solid #ddd;
  border-radius: 4px;
}

/* Hover effects */
.control input[type="range"]:hover {
}

.control input[type="color"]:hover {
  transition: width 0.3s ease, height 0.3s ease, background-color 0.3s ease;
}

/* Label text */
.control span {
  white-space: nowrap;
  font-size: 0.7rem;
}

.colorPicker {
  display: flex;
  gap: 2px;
  align-items: center;
  justify-content: center;
  width: 100%;
}

.colorButton {
  width: 20px;
  height: 20px;
  border: 2px solid #fff;
  border-radius: 50%;
  cursor: pointer;
  padding: 0;
  transition: width 0.3s ease, height 0.3s ease, background-color 0.3s ease;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
}

.colorButton:hover {
  transform: scale(1.1);
}

.colorButton.selected {
  border: 2px solid #333;
  transform: scale(1.1);
}

.clearButton {
  background-color: #fff;
  border: 1px solid #ddd;
  border-radius: 6px;
  padding: 4px 12px;
  font-size: 0.8rem;
  color: #666;
  cursor: pointer;
  transition: width 0.3s ease, height 0.3s ease, background-color 0.3s ease;
}

.clearButton:hover {
  background-color: #f0f0f0;
  border-color: #ccc;
}

.clearButton:active {
  transform: scale(0.95);
}

.expandButton {
  position: absolute;
  width: 20px;
  height: 20px;
  background-color: #f8e932;
  border-radius: 50%;
  top: -25px;
  right: 0px;
  cursor: pointer;
  z-index: 11;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

.expandButton:hover {
  background-color: #ffb120;
}
.toggleIcon {
  width: 12px;
  height: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #000;
}
.toggleIcon:hover {
  width: 12px;
  height: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #000;
}

/* Paint text label - positioned below minimized container but still draggable with it */
.paintTextLabel {
  position: absolute;
  top: 88px; /* Position below the 80px minimized container + 8px gap */
  left: 50%;
  transform: translateX(-50%);
  font-size: 1em;
  color: rgb(255, 255, 255);
  font-weight: 400;
  font-family: var(--font-founders-grotesk);
  pointer-events: none;
  z-index: 1;
  white-space: nowrap;
  letter-spacing: -0.01em;
  background-color: rgb(0, 0, 0);
  border: 1px solid rgb(0, 0, 0);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
  border-radius: 15px;
  padding: 3px 15px;
}

.contentWrapper > * {
  pointer-events: auto;
}

.draggableWrapper {
  position: fixed;
  z-index: 10;
  max-width: calc(100vw - 40px);
  max-height: calc(100vh - 40px);
  will-change: transform;
}

@media (max-width: 768px) {
  .designContainer {
    width: 90vw !important;
    max-width: 90vw !important;
    height: calc(100vh - 20vh) !important;
    max-height: calc(100vh - 20vh) !important;
    padding: 0;
    overflow: hidden;
    transition: width 0.15s ease, height 0.15s ease;
  }

  .minimizedContainer {
    width: 80px !important;
    height: 80px !important;
    border: 1px solid black;
    border-radius: 20% !important;
    background-color: #e6e6e6;
    padding: 0;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: width 0.15s ease, height 0.15s ease;
  }

  /* Mobile fixed positioning when expanded */
  .draggableWrapper:has(.normalContainer) {
    position: fixed !important;
    top: 50% !important;
    left: 50% !important;
    transform: translate(-50%, -50%) !important;
    width: 90vw !important;
    height: calc(100vh - 20vh) !important;
    margin: 0 !important;
    z-index: 10000 !important;
  }

  /* Keep minimized state draggable and properly sized */
  .draggableWrapper:has(.minimizedContainer) {
    position: fixed;
    width: 80px !important;
    height: 80px !important;
    z-index: 10;
  }

  .canvasWrapper {
    width: 100% !important;
    height: calc(100% - 80px) !important;
  }

  .canvasWrapper canvas {
    width: 100% !important;
    height: 100% !important;
  }

  /* Ensure green circle stays in position for both states */
  .greenCircle {
    position: absolute;
    top: -25px !important;
    right: 0px !important;
    z-index: 11;
  }

  .controls {
    position: relative;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, auto);
    gap: 8px;
    padding: 8px 10px;
    padding-bottom: 15px;
    justify-content: center;
    align-items: start;
    min-height: unset;
    background-color: rgb(245, 245, 245);
  }

  .control {
    width: 100%;
    min-width: unset;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
    gap: 4px;
  }

  .colorPicker {
    grid-column: span 3;
    flex-wrap: wrap;
    justify-content: center;
    gap: 4px;
  }

  .buttonGroup {
    grid-column: span 3;
    display: flex !important;
    flex-direction: row !important;
    justify-content: space-between;
    gap: 8px;
    margin-top: 8px;
    width: 100%;
    padding: 0 8px;
  }

  .buttonGroup button {
    flex: 1;
    min-width: 0;
    font-size: 0.7em;
    padding: 8px 4px;
    white-space: nowrap;
    width: auto;
  }
}

/* Ensure the design container fills the wrapper on mobile only when expanded */
@media screen and (max-width: 768px) {
  .draggableWrapper:has(.normalContainer) .designContainer {
    width: 100% !important;
    height: 100% !important;
  }
}

.labelRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  margin-bottom: 4px;
}

.valueDisplay {
  font-size: 0.8rem;
  color: #666;
  margin-left: 8px;
}

.control .colorButton {
  margin-top: 4px;
}

.control .colorButton:hover {
  transform: scale(1.1);
  transition: width 0.3s ease, height 0.3s ease, background-color 0.3s ease;
}

.blendButton {
  width: 15px;
  height: 15px;
}

.buttonGroup {
  display: flex;
  flex-direction: column;
  gap: 8px;
  width: auto;
  margin-top: 2px;
  align-items: center;
}

.buttonGroup button {
  font-family: var(--primary-font);
  letter-spacing: 0.09em;
  width: 90px;
  padding: 4px 8px;
  border-radius: 5px;
  border: 1px solid #000;
  cursor: pointer;
  font-size: 0.6em;
  background-color: white;
  color: black;
  transition: width 0.3s ease, height 0.3s ease, background-color 0.3s ease;
}

.clearButton {
  color: black;
  background-color: green;
  border: 1px solid black;
}

.clearButton:hover {
  background-color: #ff3333;
}

.saveButton {
  background-color: #ffb120;
  color: white;
}

.saveButton:hover {
  background-color: #ffb120;
}

.saveButton:disabled {
  background-color: #f0f0f0;
  border-color: #ccc;
  color: #999;
  cursor: not-allowed;
}

.loading {
  opacity: 0.7;
  cursor: wait !important;
}

@keyframes bounceIn {
  0% {
    transform: translate(-50%, 20px);
    opacity: 0;
  }
  50% {
    transform: translate(-50%, -10px);
    opacity: 0.8;
  }
  75% {
    transform: translate(-50%, 5px);
    opacity: 0.9;
  }
  100% {
    transform: translate(-50%, 0);
    opacity: 1;
  }
}

@keyframes bounceOut {
  0% {
    transform: translate(-50%, 0);
    opacity: 1;
  }
  25% {
    transform: translate(-50%, -10px);
    opacity: 0.8;
  }
  100% {
    transform: translate(-50%, 20px);
    opacity: 0;
  }
}

.notification {
  position: absolute;
  top: -50px;
  left: 50%;
  transform: translate(-50%, 0);
  padding: 10px 20px;
  border-radius: 4px;
  font-size: 14px;
  z-index: 1000;
  animation: bounceIn 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  white-space: nowrap;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

.notification.exit {
  animation: bounceOut 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

.success {
  background-color: #4caf50;
  color: white;
}

.error {
  background-color: #f44336;
  color: white;
}

.backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background-color: rgba(0, 0, 0, 0.85);
  z-index: 50;
  opacity: 0;
  animation: fadeInBackdrop 0.3s ease forwards;
  pointer-events: auto;
  display: none;
}

.backdrop.active {
  display: block;
}

@keyframes fadeInBackdrop {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

/* When expanded, the component should be above the backdrop */
.draggableWrapperExpanded {
  z-index: 51;
}
